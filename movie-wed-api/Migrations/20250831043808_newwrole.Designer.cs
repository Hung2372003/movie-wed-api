// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using movie_wed_api.Database;

#nullable disable

namespace movie_wed_api.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20250831043808_newwrole")]
    partial class newwrole
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_unicode_ci")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("movie_wed_api.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CONTENT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MOVIE_ID");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UPDATED_AT");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id")
                        .HasName("PK_COMMENTS");

                    b.HasIndex("MovieId")
                        .HasDatabaseName("IX_COMMENTS_MOVIE_ID");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_COMMENTS_USER_ID");

                    b.ToTable("COMMENTS");
                });

            modelBuilder.Entity("movie_wed_api.Models.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("DURATION");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int")
                        .HasColumnName("EPISODE_NUMBER");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MOVIE_ID");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TITLE");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("VideoPublicId")
                        .HasColumnType("longtext")
                        .HasColumnName("VIDEO_PUBLIC_ID");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("VIDEO_URL");

                    b.HasKey("Id")
                        .HasName("PK_EPISODES");

                    b.HasIndex("MovieId", "EpisodeNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_EPISODES_MOVIE_ID_EPISODE_NUMBER");

                    b.ToTable("EPISODES");
                });

            modelBuilder.Entity("movie_wed_api.Models.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MOVIE_ID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id")
                        .HasName("PK_FAVORITES");

                    b.HasIndex("MovieId")
                        .HasDatabaseName("IX_FAVORITES_MOVIE_ID");

                    b.HasIndex("UserId", "MovieId")
                        .IsUnique()
                        .HasDatabaseName("IX_FAVORITES_USER_ID_MOVIE_ID");

                    b.ToTable("FAVORITES");
                });

            modelBuilder.Entity("movie_wed_api.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .HasColumnType("longtext")
                        .HasColumnName("COUNTRY");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Director")
                        .HasColumnType("longtext")
                        .HasColumnName("DIRECTOR");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("DURATION");

                    b.Property<string>("PosterPublicId")
                        .HasColumnType("longtext")
                        .HasColumnName("POSTER_PUBLIC_ID");

                    b.Property<string>("PosterUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("POSTER_URL");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("int")
                        .HasColumnName("RELEASE_YEAR");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("TITLE");

                    b.Property<string>("TrailerPublicId")
                        .HasColumnType("longtext")
                        .HasColumnName("TRAILER_PUBLIC_ID");

                    b.Property<string>("TrailerUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("TRAILER_URL");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("TYPE");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UPDATED_AT");

                    b.HasKey("Id")
                        .HasName("PK_MOVIES");

                    b.ToTable("MOVIES");
                });

            modelBuilder.Entity("movie_wed_api.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MOVIE_ID");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int")
                        .HasColumnName("RATING_VALUE");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("SCORE");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UPDATED_AT");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id")
                        .HasName("PK_RATINGS");

                    b.HasIndex("MovieId")
                        .HasDatabaseName("IX_RATINGS_MOVIE_ID");

                    b.HasIndex("UserId", "MovieId")
                        .IsUnique()
                        .HasDatabaseName("IX_RATINGS_USER_ID_MOVIE_ID");

                    b.ToTable("RATINGS");
                });

            modelBuilder.Entity("movie_wed_api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarPublicId")
                        .HasColumnType("longtext")
                        .HasColumnName("AVATAR_PUBLIC_ID");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("AVATAR_URL");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CREATED_AT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext")
                        .HasColumnName("FULL_NAME");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("PASSWORD_HASH");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ROLE");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UPDATED_AT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("USERNAME");

                    b.HasKey("Id")
                        .HasName("PK_USERS");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_USERS_EMAIL");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_USERS_USERNAME");

                    b.ToTable("USERS");
                });

            modelBuilder.Entity("movie_wed_api.Models.Comment", b =>
                {
                    b.HasOne("movie_wed_api.Models.Movie", "Movie")
                        .WithMany("Comments")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_COMMENTS_MOVIES_MOVIE_ID");

                    b.HasOne("movie_wed_api.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_COMMENTS_USERS_USER_ID");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movie_wed_api.Models.Episode", b =>
                {
                    b.HasOne("movie_wed_api.Models.Movie", "Movie")
                        .WithMany("Episodes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EPISODES_MOVIES_MOVIE_ID");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("movie_wed_api.Models.Favorite", b =>
                {
                    b.HasOne("movie_wed_api.Models.Movie", "Movie")
                        .WithMany("Favorites")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FAVORITES_MOVIES_MOVIE_ID");

                    b.HasOne("movie_wed_api.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FAVORITES_USERS_USER_ID");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movie_wed_api.Models.Rating", b =>
                {
                    b.HasOne("movie_wed_api.Models.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RATINGS_MOVIES_MOVIE_ID");

                    b.HasOne("movie_wed_api.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RATINGS_USERS_USER_ID");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movie_wed_api.Models.Movie", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Episodes");

                    b.Navigation("Favorites");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("movie_wed_api.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Favorites");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
